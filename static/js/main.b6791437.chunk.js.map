{"version":3,"sources":["Components/Grid/Block.jsx","Components/Grid/Grid3X3.jsx","Components/Grid/SudokuBoard.jsx","Components/Grid/SudokuButton.jsx","sudokuPresets.js","Logic/BoardPositions.js","Logic/Validator.js","Logic/Statistics.js","Logic/ScratchOffCheck.js","Logic/CrossHatching.js","Logic/RangeChecking.js","Logic/Solver.js","Components/Sudoku.jsx","Components/SudokuMaker.jsx","App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","overrides","MuiInputBase","root","height","cursor","input","textAlign","fontSize","Block","getInputStyle","props","invalidInput","inputName","classes","inputOpaque","inputError","this","backgroundColor","handleInputChange","sudokuBoard","Paper","className","paper","style","InputBase","onChange","name","value","Component","withStyles","width","opacity","color","weight","Grid3X3","blockNumber","getInputNameBasedOnCoordinate","Fragment","Grid","container","spacing","justify","map","key","item","SudokuBoard","generateBackgroundColorValues","grid3x3Item","margin","SudokuButton","onClick","title","Button","variant","button","easiest","easy","easySolved","easy2","easy3","medium","medium2","medium3","hard1","hard2","reset","defaultPreset","presetEasy","getXCoordinate","grid","block","Error","getYCoordinate","row","translateRAWPositionToCoordinates","positionRAW","positionSplit","split","Number","cordX","cordY","err","console","log","alert","message","translateSudokuArrayToStateObject","sudokuArray","sudokuState","y","x","getCoordinatesOfPositionState","position","generateEmptySudokuArray","translateSudokuStateObjectToArray","pos","translateBlockPositionsToCoordinates","blockIndex","positionOfNumber","getCoordinatesOfBlock","positionInBlock","switchRowToColumnOfBoard","sudokuBoardSwitchedXAndY","switchBlockRowsToColumns","arrayBlock","arrayBlockSwitched90Degree","push","switchBoardToBlockArrays","sudokuBoardArrayBlocks","z","validate","validNumbers","validateNumbers","isValid","positionOfInvalidNumber","validRows","validateRows","validColumns","validateColumns","validBlocks","validateBlocks","isNaN","validateRow","isNumberMoreThanOnceInArray","numberToSearchInRow","filter","number","length","validate1DArray","array","numberToSearch","BoardPositions","callbackPositionTranslation","sudokuBoardBlockArrays","calculateSolvingProcess","calculateFoundNumbers","oldSudokuBoard","newSudokuBoard","totalNumbersOld","totalPossibleNumbersOld","totalFoundNumbersNew","totalPossibleNumbersNew","isFixedField","field","solve","counter","hasNewCandidateFound","checkRows","checkColumns","checkBlocks","checkRow","fixedNumbers","getAllFixedNumbersOfArray","scratchAllFixedNumbersFromField","possibleNumberOfField","includes","hasFoundAtLeastOneCandidate","ScratchOffCheck","checkArrayForSinglePossibleCandidates","rowIndex","numbersWithSinglePossibleCandidates","getAllNumbersWithSinglePossibleCandidateInArray","getUpdatedArrayWithAllFoundSinglePossibleCandidatesInField","candidatesOfField","foundNumberWithSinglePossibleCandidate","getNumberWithSinglePossibleCandidateInField","find","candidate","singleNumberCounter","forEach","checkBlocksForCandidateInCommonColumnOrRow","rowsWithEqualCandidates","rowWithEqualCandidates","checkBlockForCandidateInCommonRowOrColumn","rowOfCandidates","rowOfCandidate","scratchCandidatesOffRow","positionsOfEqualCandidates","findPositionsOfEqualNumbersInArray","getPositionOfEqualNumbersOnlyFoundInSameRow","getPositionsByBlockNumber","translateRowPositionByBlockNumber","blockArray","equalNumbers","equalNumberCounter","numberWithCandidates","positionOfEqualCandidate","rowWithEqualCandidate","findEqualCandidatesInBlockOnlyInEqualRow","startingRowOfCandidate","findIndex","positionIndex","valueToScratchOff","rowOfBoard","candidates","column","isBlockWhereValueToScratchOffWasFound","isBlockWhereValueToScratchOffWasFoundInCommonRow","isNewNumberScratchedOff","checkColumnRowOrBlock","sudokuBoardWithAllPossibleNumbers","generateAllPossibleNumbersForFields","sudokuBoardResult","CrossHatching","RangeChecking","sudokuSolved","translateSudokuWithAllPossibleNumbersBackToNormalArray","statisticsOfSolving","Statistics","Sudoku","resetSudoku","setState","solvedMessage","updateSudokuBoard","SudokuPresets","solveSodoku","state","Validator","Solver","foundNumbersDiff","event","target","sudokuBoardNew","handleSudokuArrayMaker","suokuArray","header","subHeader","boardSize","errorText","solvedText","buttonWrapper","display","justifyContent","alignItems","flexDirection","marginTop","fontFamily","SudokuMaker","convertTo2DArray","numbers","arrayOutput","digit","index","TextField","multiline","rows","minHeight","App","view","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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,EAAG,I,KAG3BC,WAAa,CACX,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,I,KAG3BC,MAAQ,CACN,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAEzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAEzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,I,KAG3BC,MAAQ,CACN,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAEzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAEzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,I,KAG3BC,OAAS,CACP,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,I,KAG3BC,QAAU,CACR,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,I,KAE3BC,QAAU,CACR,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,I,KAG3BC,MAAQ,CACN,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,I,KAE3BC,MAAQ,CACN,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,I,KAG3BC,MAAQ,CACN,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,I,KAG3BC,cAAgBlD,KAAKmD,YCyER,M,iDA/MbC,eAAiB,SAACC,EAAMC,GACtB,OAAQD,GACN,KAAK,EACL,KAAK,EACL,KAAK,EACH,OAAOC,EAET,KAAK,EACL,KAAK,EACL,KAAK,EACH,OAAO,EAAIA,EAEb,KAAK,EACL,KAAK,EACL,KAAK,EACH,OAAO,EAAIA,EAEb,QACE,MAAM,IAAIC,MAAM,gC,KAItBC,eAAiB,SAACH,EAAMI,GACtB,OAAQJ,GACN,KAAK,EACL,KAAK,EACL,KAAK,EACH,OAAOI,EAET,KAAK,EACL,KAAK,EACL,KAAK,EACH,OAAO,EAAIA,EAEb,KAAK,EACL,KAAK,EACL,KAAK,EACH,OAAO,EAAIA,EAEb,QACE,MAAM,IAAIF,MAAM,gC,KAItBG,kCAAoC,SAACC,GACnC,IACE,IAAMC,EAAgBD,EAAYE,MAAM,KAElCR,EAAOS,OAAOF,EAAc,IAAM,EAClCH,EAAMK,OAAOF,EAAc,IAAM,EACjCN,EAAQQ,OAAOF,EAAc,IAAM,EAKzC,MAAO,CAAEG,MAHK,EAAKX,eAAeC,EAAMC,GAGxBU,MAFF,EAAKR,eAAeH,EAAMI,IAGxC,MAAOQ,GACPC,QAAQC,IAAIF,GACZG,MAAMH,EAAII,W,KAIdC,kCAAoC,SAACC,GAGnC,IAFA,IAAIC,EAAc,GAETC,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACK,IAAtBH,EAAYE,GAAGC,KAAUH,EAAYE,GAAGC,GAAK,IACjDF,EAAY,IAAD,OAAKE,EAAI,EAAT,YAAcD,EAAI,IAAOF,EAAYE,GAAGC,GAGvD,OAAOF,G,KAGTG,8BAAgC,SAACC,GAG/B,MAAO,CAAEb,MAFKa,EAAS,GAAK,EAEZZ,MADFY,EAAS,GAAK,I,KAI9BC,yBAA2B,WAGzB,IAFA,IAAIN,EAAc,GAETE,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1BF,EAAYE,GAAK,GACjB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACrBH,EAAYE,GAAGC,GAAK,GAIxB,OAAOH,G,KAGTO,kCAAoC,SAACN,GACnC,IAAID,EAAc,EAAKM,2BACvB,IAAK,IAAIE,KAAOP,EACd,GAAIA,EAAYO,GAAM,CAAC,IAAD,EACK,EAAKJ,8BAA8BI,GAApDhB,EADY,EACZA,MACRQ,EAFoB,EACLP,OACID,GAASD,OAAOU,EAAYO,IAInD,OAAOR,G,KAGTS,qCAAuC,SAACC,EAAYC,GAAqB,MAG9C,EAAKC,sBAAsBD,GAA5CnB,EAH+D,EAG/DA,MAAOC,EAHwD,EAGxDA,MAEf,OAAQiB,GACN,KAAK,EACH,MAAO,CAAElB,QAAOC,SAClB,KAAK,EACH,MAAO,CAAED,MAAOA,EAAQ,EAAGC,SAC7B,KAAK,EACH,MAAO,CAAED,MAAOA,EAAQ,EAAGC,SAC7B,KAAK,EACH,MAAO,CAAED,QAAOC,MAAOA,EAAQ,GACjC,KAAK,EACH,MAAO,CAAED,MAAOA,EAAQ,EAAGC,MAAOA,EAAQ,GAC5C,KAAK,EACH,MAAO,CAAED,MAAOA,EAAQ,EAAGC,MAAOA,EAAQ,GAC5C,KAAK,EACH,MAAO,CAAED,QAAOC,MAAOA,EAAQ,GACjC,KAAK,EACH,MAAO,CAAED,MAAOA,EAAQ,EAAGC,MAAOA,EAAQ,GAC5C,KAAK,EACH,MAAO,CAAED,MAAOA,EAAQ,EAAGC,MAAOA,EAAQ,GAC5C,QACE,OAAO,IAAIT,MAAM,qC,KAIvB4B,sBAAwB,SAACC,GACvB,OAAQA,GACN,KAAK,EACL,KAAK,EACL,KAAK,EACH,MAAO,CAAErB,MAAOqB,EAAiBpB,MAAO,GAC1C,KAAK,EACL,KAAK,EACL,KAAK,EACH,MAAO,CAAED,MAAOqB,EAAkB,EAAGpB,MAAO,GAC9C,KAAK,EACL,KAAK,EACL,KAAK,EACH,MAAO,CAAED,MAAOqB,EAAkB,EAAGpB,MAAO,GAC9C,QACE,OAAO,IAAIT,MAAM,oC,KAIvB8B,yBAA2B,SAAClF,GAG1B,IAFA,IAAImF,EAA2B,GAEtBZ,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1BY,EAAyBZ,GAAK,GAC9B,IAAK,IAAID,EAAI,EAAGA,EAAI,EAAGA,IACrBa,EAAyBZ,GAAGD,GAAKtE,EAAYsE,GAAGC,GAGpD,OAAOY,G,KAGTC,yBAA2B,SAACC,GAG1B,IAFA,IAAIC,EAA6B,GAExBf,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAID,EAAI,EAAGA,EAAI,EAAGA,IACrBgB,EAA2BC,KAAKF,EAAWf,GAAGC,K,KAKpDiB,yBAA2B,SAACxF,GAG1B,IAFA,IAAIyF,EAAyB,GAEpBC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAuBC,GAAK,GAG9B,IAAK,IAAIpB,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACjBA,EAAI,GAAKD,EAAI,EAAGmB,EAAuB,GAAGF,KAAKvF,EAAYsE,GAAGC,IACzDA,GAAK,GAAKA,EAAI,GAAKD,EAAI,EAC9BmB,EAAuB,GAAGF,KAAKvF,EAAYsE,GAAGC,IACvCA,GAAK,GAAKD,EAAI,EACrBmB,EAAuB,GAAGF,KAAKvF,EAAYsE,GAAGC,IACvCA,EAAI,GAAKD,GAAK,GAAKA,EAAI,EAC9BmB,EAAuB,GAAGF,KAAKvF,EAAYsE,GAAGC,IACvCA,GAAK,GAAKA,EAAI,GAAKD,GAAK,GAAKA,EAAI,EACxCmB,EAAuB,GAAGF,KAAKvF,EAAYsE,GAAGC,IACvCA,GAAK,GAAKD,GAAK,GAAKA,EAAI,EAC/BmB,EAAuB,GAAGF,KAAKvF,EAAYsE,GAAGC,IACvCA,EAAI,GAAKD,GAAK,EACrBmB,EAAuB,GAAGF,KAAKvF,EAAYsE,GAAGC,IACvCA,GAAK,GAAKA,EAAI,GAAKD,GAAK,EAC/BmB,EAAuB,GAAGF,KAAKvF,EAAYsE,GAAGC,IACvCA,GAAK,GAAKD,GAAK,GACtBmB,EAAuB,GAAGF,KAAKvF,EAAYsE,GAAGC,IAGpD,OAAOkB,IC1EI,M,iDA/HbE,SAAW,SAAC3F,GACV,IAAI4F,EAAe,EAAKC,gBAAgB7F,GACxC,IAAK4F,EAAaE,QAChB,MAAO,CACLA,SAAS,EACTC,wBAAyBH,EAAaG,yBAG1C,IAAIC,EAAY,EAAKC,aAAajG,GAClC,IAAKgG,EAAUF,QACb,MAAO,CACLA,SAAS,EACTC,wBAAyBC,EAAUD,yBAGvC,IAAIG,EAAe,EAAKC,gBAAgBnG,GACxC,IAAKkG,EAAaJ,QAChB,MAAO,CACLA,SAAS,EACTC,wBAAyBG,EAAaH,yBAG1C,IAAIK,EAAc,EAAKC,eAAerG,GACtC,OAAKoG,EAAYN,QAMV,CAAEA,SAAS,EAAMC,wBAAyB,MALxC,CACLD,SAAS,EACTC,wBAAyBK,EAAYL,0B,KAM3CF,gBAAkB,SAAC7F,GACjB,IAAK,IAAIsE,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACrB,IACGvE,EAAYsE,GAAGC,GAAK,GACnBvE,EAAYsE,GAAGC,GAAK,GACpB+B,MAAMtG,EAAYsE,GAAGC,MACD,KAAtBvE,EAAYsE,GAAGC,GAEf,MAAO,CAAEuB,SAAS,EAAOC,wBAAyB,CAACxB,EAAGD,IAG5D,MAAO,CAAEwB,SAAS,EAAMC,wBAAyB,O,KAGnDE,aAAe,SAACjG,GAKd,OAAO,EAAKuG,YAAYvG,GAJoB,SAC1CsE,EACAyB,GAF0C,MAGvC,CAACA,EAAyBzB,O,KAIjCkC,4BAA8B,SAACC,EAAqBnD,GAClD,OAAOA,EAAIoD,QAAO,SAACC,GAAD,OAAYA,IAAWF,KAAqBG,OAAS,G,KAGzEC,gBAAkB,SAACC,GACjB,IAAK,IAAIlC,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAChC,IAAMmC,EAAiBD,EAAMlC,GAC7B,GAAKmC,GACD,EAAKP,4BAA4BO,EAAgBD,GACnD,MAAO,CAAEhB,SAAS,EAAOC,wBAAyBnB,GAGtD,MAAO,CAAEkB,SAAS,EAAMC,wBAAyB,O,KAGnDI,gBAAkB,SAACnG,GACjB,IAAImF,EAA2B6B,EAAe9B,yBAC5ClF,GAMF,OAAO,EAAKuG,YACVpB,GAL0C,SAC1Cb,EACAyB,GAF0C,MAGvC,CAACzB,EAAGyB,O,KAOXQ,YAAc,SAACnC,EAAa6C,GAC1B,IAAK,IAAI3C,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAMhB,EAAMc,EAAYE,GADE,EAEiB,EAAKuC,gBAAgBvD,GAA1DwC,EAFoB,EAEpBA,QAASC,EAFW,EAEXA,wBAEf,IAAKD,EACH,MAAO,CACLA,UACAC,wBAAyBkB,EACvB3C,EACAyB,IAKR,MAAO,CAAED,SAAS,EAAMC,wBAAyB,O,KAGnDM,eAAiB,SAACrG,GAChB,IAcIkH,EAAyBF,EAAexB,yBAC1CxF,GAEF,OAAO,EAAKuG,YACVW,GAlB0C,SAC1C5C,EACAyB,GACI,IAAD,EAICiB,EAAenC,qCACjBP,EACAyB,GAEF,MAAO,CARJ,EAEDnC,MAFC,EAGDC,Y,QCjEO,M,iDA5CbsD,wBAA0B,a,KAI1BC,sBAAwB,SAACC,EAAgBC,GAOvC,IALA,IAAIC,EAAkB,EAClBC,EAA0B,EAC1BC,EAAuB,EACvBC,EAA0B,EAErBpD,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACjB,EAAKoD,aAAaN,EAAe/C,GAAGC,KACtCgD,IACE,EAAKI,aAAaL,EAAehD,GAAGC,KACtCkD,IAEFD,GAA2BH,EAAe/C,GAAGC,GAAGqC,OAChDc,GAA2BJ,EAAehD,GAAGC,GAAGqC,OAItD,MAAO,CACLW,kBACAC,0BACAC,uBACAC,4B,KAKJC,aAAe,SAACC,GACd,OAAwB,IAAjBA,EAAMhB,SC6DF,MA9Fb,aAAe,IAAD,gCAOdiB,MAAQ,SAAC7H,GACP,EAAKA,YAAcA,EACnB,IAAI8H,EAAU,EACd,GACEA,IACA/D,QAAQC,IACN,yBAA2B8D,EAAU,kCAEvC,EAAKC,sBAAuB,EAC5B,EAAKC,YACL,EAAKC,eACL,EAAKC,oBACE,EAAKH,sBAEd,OAAO,EAAK/H,aArBA,KAwBdgI,UAAY,WACV,IAAK,IAAI1D,EAAI,EAAGA,EAAI,EAAGA,IACrB,EAAK6D,SAAS7D,IA1BJ,KA8Bd2D,aAAe,WACb,EAAKjI,YAAcgH,EAAe9B,yBAChC,EAAKlF,aAGP,IAAK,IAAIuE,EAAI,EAAGA,EAAI,EAAGA,IACrB,EAAK4D,SAAS5D,GAGhB,EAAKvE,YAAcgH,EAAe9B,yBAChC,EAAKlF,cAxCK,KA4CdkI,YAAc,WACZ,EAAKlI,YAAcgH,EAAexB,yBAChC,EAAKxF,aAGP,IAAK,IAAIsE,EAAI,EAAGA,EAAI,EAAGA,IACrB,EAAK6D,SAAS7D,GAGhB,EAAKtE,YAAcgH,EAAexB,yBAChC,EAAKxF,cAtDK,KA0DdmI,SAAW,SAAC7D,GACV,IAAI8D,EAAe,EAAKC,0BAA0B/D,GAElD,EAAKtE,YAAYsE,GAAK,EAAKtE,YAAYsE,GAAG/C,KAAI,SAACgD,GAC7C,OAAI,EAAKoD,aAAapD,GAAWA,EACE,EAAK+D,gCACtC/D,EACA6D,OAjEQ,KAuEdC,0BAA4B,SAAC/D,GAI3B,OAHoB,EAAKtE,YAAYsE,GAAGoC,QAAO,SAACnC,GAAD,OAAO,EAAKoD,aAAapD,MACvChD,KAAI,SAACqG,GAAD,OAAWA,EAAM,OAzE1C,KA8EdU,gCAAkC,SAACV,EAAOQ,GACxC,OAAOR,EAAMlB,QAAO,SAAC6B,GACnB,OAAIH,EAAaI,SAASD,KACxB,EAAKR,sBAAuB,GACrB,OAlFC,KAyFdJ,aAAe,SAACC,GACd,OAAwB,IAAjBA,EAAMhB,QAzFb/G,KAAKG,YAAc,KACnBH,KAAKkI,sBAAuB,GCsIjB,MAvIb,aAAe,IAAD,gCAOdF,MAAQ,SAAA7H,GACN+D,QAAQC,IAAI,qCACZ,EAAKhE,YAAcA,EACnB,IAAI8H,EAAU,EACVW,GAA8B,EAElC,GACEX,IACA/D,QAAQC,IACN,yBAA2B8D,EAAU,oCAEvC,EAAKC,sBAAuB,EAC5B,EAAK/H,YAAc0I,EAAgBb,MAAM,EAAK7H,aAC9C,EAAKgI,YACL,EAAKC,eACL,EAAKC,cAED,EAAKH,uBAAsBU,GAA8B,SACtD,EAAKV,sBAEd,MAAO,CACL/H,YAAa,EAAKA,YAClB+H,qBAAsBU,IA7BZ,KAiCdT,UAAY,WACV,EAAKW,yCAlCO,KAqCdV,aAAe,WACb,EAAKjI,YAAcgH,EAAe9B,yBAChC,EAAKlF,aAGP,EAAK2I,wCAEL,EAAK3I,YAAcgH,EAAe9B,yBAChC,EAAKlF,cA7CK,KAiDdkI,YAAc,WACZ,EAAKlI,YAAcgH,EAAexB,yBAChC,EAAKxF,aAGP,EAAK2I,wCAEL,EAAK3I,YAAcgH,EAAexB,yBAChC,EAAKxF,cAzDK,KA6Dd2I,sCAAwC,WACtC,EAAK3I,YAAc,EAAKA,YAAYuB,KAAI,SAAC+C,EAAGsE,GAC1C,IAAMC,EAAsC,EAAKC,gDAC/CxE,EACAsE,GAGF,OAAO,EAAKG,2DACVzE,EACAuE,OAtEQ,KA2EdE,2DAA6D,SAC3DjC,EACA+B,GAEA,OAAO/B,EAAMvF,KAAI,SAAAyH,GACf,IAAMC,EAAyC,EAAKC,4CAClDF,EACAH,GAGF,OAAII,GACF,EAAKlB,sBAAuB,EACrB,CAACkB,IACID,MAxFJ,KA4FdE,4CAA8C,SAC5CF,EACAH,GAEA,OAAOG,EAAkBG,MAAK,SAAAC,GAC5B,OAAOP,EAAoCL,SAASY,OAjG1C,KAqGdN,gDAAkD,SAAChC,EAAO8B,GAIxD,IAHA,IAAIC,EAAsC,GACpCT,EAAe,EAAKC,0BAA0BO,GAFiB,WAI5DjC,GACP,IAAI0C,EAAsB,EAC1BvC,EAAMwC,SAAQ,SAAAN,IAET,EAAKrB,aAAaqB,IACnBA,EAAkBR,SAAS7B,IAE3B0C,OAGwB,IAAxBA,GAA8BjB,EAAaI,SAAS7B,IACtDkC,EAAoCtD,KAAKoB,IAXpCA,EAAS,EAAGA,GAAU,EAAGA,IAAW,EAApCA,GAeT,OAAOkC,GAxHK,KA2HdR,0BAA4B,SAAA/D,GAI1B,OAHoB,EAAKtE,YAAYsE,GAAGoC,QAAO,SAAAnC,GAAC,OAAI,EAAKoD,aAAapD,MACrChD,KAAI,SAAAqG,GAAK,OAAIA,EAAM,OA7HxC,KAkIdD,aAAe,SAAAC,GACb,OAAwB,IAAjBA,EAAMhB,QAlIb/G,KAAKG,YAAc,KACnBH,KAAKkI,sBAAuB,GCgQjB,MAnQb,aAAe,IAAD,gCASdF,MAAQ,SAAC7H,GACP+D,QAAQC,IAAI,qCACZ,EAAKhE,YAAcA,EACnB,IAAI8H,EAAU,EACVW,GAA8B,EAElC,GACEX,IACA/D,QAAQC,IACN,yBAA2B8D,EAAU,oCAEvC,EAAKC,sBAAuB,EAE5B,EAAKC,YAED,EAAKD,uBAAsBU,GAA8B,SACtD,EAAKV,sBAEd,MAAO,CACL/H,YAAa,EAAKA,YAClB+H,qBAAsBU,IA7BZ,KAiCdT,UAAY,WACV,EAAKuB,8CAlCO,KAqCdA,2CAA6C,WAC3C,IAAIrC,EACJA,EAAyBF,EAAexB,yBACtC,EAAKxF,aAKP,IAFA,IAAIwJ,EAA0B,GAErBxI,EAAc,EAAGA,EAAc,EAAGA,IAAe,CACxD,IAAIyI,EAAyB,EAAKC,0CAChCxC,EACAlG,GAGFwI,EAAwBjE,KAAKkE,GAG/BD,EAAwBF,SAAQ,SAACK,EAAiB3I,GAChD2I,EAAgBL,SAAQ,SAACM,GACvB,EAAKC,wBACHD,EAAetG,IACfsG,EAAepJ,MACfQ,UA3DM,KAmEd0I,0CAA4C,SAC1CxC,EACAlG,GAGA,IAAM8I,EAA6B,EAAKC,mCACtC7C,EAAuBlG,IAEnBwI,EAA0B,EAAKQ,4CACnCF,GAQF,OAL+C,EAAKG,0BAClDjJ,EACAwI,IAjFU,KAuFdS,0BAA4B,SAACjJ,EAAawI,GACxC,OAAO,EAAKU,kCACVlJ,EACAwI,IA1FU,KA8FdU,kCAAoC,SAClClJ,EACAwI,GAoBA,OAlBuBA,EAAwBjI,KAAI,SAAC+B,GAClD,OAAQtC,GACN,KAAK,EACL,KAAK,EACL,KAAK,EACH,OAAO,eAAKsC,EAAZ,CAAiBtC,gBACnB,KAAK,EACL,KAAK,EACL,KAAK,EACH,MAAO,CAAEsC,IAAKA,EAAIA,IAAM,EAAG9C,MAAO8C,EAAI9C,MAAOQ,eAC/C,KAAK,EACL,KAAK,EACL,KAAK,EACH,MAAO,CAAEsC,IAAKA,EAAIA,IAAM,EAAG9C,MAAO8C,EAAI9C,MAAOQ,eAC/C,QACE,MAAM,IAAIoC,MAAM,wDAjHV,KAuHd2G,mCAAqC,SAACI,GAEpC,IADA,IAAIC,EAAe,GADgC,WAE1ChB,GACP,IAAIiB,EAAqB,CAAEvC,QAAS,EAAGrD,SAAU,IAEjD0F,EAAWb,SAAQ,SAACgB,EAAsB7F,GACpC6F,EAAqB9B,SAASY,KAChCiB,EAAmBvC,QAAUuC,EAAmBvC,QAAU,EAC1DuC,EAAmB5F,SAAnB,sBACK4F,EAAmB5F,UADxB,CAEEA,QAIF4F,EAAmBvC,QAAU,GAC/BsC,EAAa7E,KAAK,CAChBd,SAAU4F,EAAmB5F,SAC7BjE,MAAO4I,KAfJA,EAAY,EAAGA,GAAa,EAAGA,IAAc,EAA7CA,GAmBT,OAAOgB,GA5IK,KA+IdJ,4CAA8C,SAC5CF,GAEA,IAAIN,EAA0B,GAU9B,OARAM,EAA2BR,SAAQ,SAACiB,GAClC,IAAMC,EAAwB,EAAKC,yCACjCF,GAEEC,GACFhB,EAAwBjE,KAAKiF,MAG1BhB,GA5JK,KA+JdiB,yCAA2C,SAACF,GAW1C,IATA,IAAMvE,EAAY,CAChB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEL0E,EAAyB1E,EAAU2E,WAAU,SAACrH,GAAD,OAC/CA,EAAIkF,SAAS+B,EAAyB9F,SAAS,OAI3CmG,EAAgB,EACpBA,EAAgBL,EAAyB9F,SAASmC,OAClDgE,IAEA,IACG5E,EAAU0E,GAAwBlC,SACjC+B,EAAyB9F,SAASmG,IAGpC,OAAO,KAGX,MAAO,CACLtH,IAAKoH,EACLlK,MAAO+J,EAAyB/J,QAzLtB,KA6LdqJ,wBAA0B,SAACvG,EAAKuH,EAAmB7J,GACjD,EAAKhB,YAAc,EAAKA,YAAYuB,KAAI,SAACuJ,EAAYlC,GACnD,OAAIA,IAAatF,EAAYwH,EAErBA,EAAWvJ,KAAI,SAACwJ,EAAYC,GAclC,OAbQD,EAAWrE,QAAO,SAAC0C,GACzB,QACEA,IAAcyB,IACb,EAAKI,sCACJ3H,EACA0H,EACAhK,MAGF,EAAK+G,sBAAuB,GACrB,aA5MH,KAuNdkD,sCAAwC,SAAC3H,EAAK0H,EAAQhK,GACpD,OAAO,EAAKkK,iDACV5H,EACA0H,EACAhK,IA3NU,KA+NdkK,iDAAmD,SACjD5H,EACA0H,EACAhK,GAEA,OAAQA,GACN,KAAK,EACH,OAAOsC,EAAM,GAAK0H,EAAS,EAC7B,KAAK,EACH,OAAO1H,EAAM,GAAK0H,GAAU,GAAKA,EAAS,EAC5C,KAAK,EACH,OAAO1H,EAAM,GAAK0H,GAAU,GAAKA,EAAS,EAE5C,KAAK,EACH,OAAO1H,GAAO,GAAKA,EAAM,GAAK0H,EAAS,EACzC,KAAK,EACH,OAAO1H,GAAO,GAAKA,EAAM,GAAK0H,GAAU,GAAKA,EAAS,EACxD,KAAK,EACH,OAAO1H,GAAO,GAAKA,EAAM,GAAK0H,GAAU,GAAKA,EAAS,EAExD,KAAK,EACH,OAAO1H,GAAO,GAAKA,EAAM,GAAK0H,EAAS,EACzC,KAAK,EACH,OAAO1H,GAAO,GAAKA,EAAM,GAAK0H,GAAU,GAAKA,EAAS,EACxD,KAAK,EACH,OAAO1H,GAAO,GAAKA,EAAM,GAAK0H,GAAU,GAAKA,EAAS,EACxD,QACE,OAAO,IA1PC,KA8PdrD,aAAe,SAACC,GACd,OAAwB,IAAjBA,EAAMhB,QA9Pb/G,KAAKG,YAAc,KACnBH,KAAKsL,yBAA0B,EAC/BtL,KAAKuL,sBAAwB,IC6ElB,MA9Eb,aAAe,IAAD,gCASdvD,MAAQ,SAAC7H,GACP+D,QAAQC,IAAI,8BAA+BhE,GAC3C,IAAMqL,EAAoC,EAAKC,oCAC7CtL,GAEF,EAAKA,YAAL,YAAuBqL,GAKvB,IAAIvD,EAAU,EAEd,EAAG,CACDA,IACA/D,QAAQC,IACN,yBAA2B8D,EAAU,qCAEvC,EAAKC,sBAAuB,EAC5B,IAAIwD,EAAoB,MACxBA,EAAoBC,EAAc3D,MAAM,EAAK7H,cAEvB+H,uBACpBwD,EAAoBE,EAAc5D,MAAM0D,EAAkBvL,cAE5D,EAAKA,YAAcuL,EAAkBvL,YACrC,EAAK+H,qBAAuBwD,EAAkBxD,2BACvC,EAAKA,sBASd,OAPAhE,QAAQC,IAAI,EAAKhE,YAAa,qCAOvB,CAAE0L,aANY,EAAKC,yDAMHC,oBAJKC,EAAWzE,sBACrCiE,EACA,EAAKrL,eA1CK,KA+CdsL,oCAAsC,SAACtL,GAGrC,IAAK,IAAIsE,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAChBvE,EAAYsE,GAAGC,GACfvE,EAAYsE,GAAGC,GAAK,CAACvE,EAAYsE,GAAGC,IADjBvE,EAAYsE,GAAGC,GAAK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAIzE,OAAOvE,GAxDK,KA2Dd2L,uDAAyD,WAGvD,IAFA,IAAIrE,EAAiB,GAEZhD,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1BgD,EAAehD,GAAK,GACpB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACjB,EAAKoD,aAAa,EAAK3H,YAAYsE,GAAGC,IACxC+C,EAAehD,GAAGC,GAAK,EAAKvE,YAAYsE,GAAGC,GAAG,GAC3C+C,EAAehD,GAAGC,GAAK,GAGhC,OAAO+C,GAtEK,KAyEdK,aAAe,SAACC,GACd,OAAwB,IAAjBA,EAAMhB,QAzEb/G,KAAKG,YAAc,KACnBH,KAAKkI,sBAAuB,GC0C1B+D,E,YACJ,WAAYvM,GAAQ,IAAD,8BACjB,4CAAMA,KAgBRwM,YAAc,WACZ,EAAKC,SAAS,CACZxM,aAAc,GACdyM,cAAe,KAEjB,EAAKC,kBAAkBC,EAAcrJ,QAtBpB,EA6BnBsJ,YAAc,WACZ,IAAMhI,EAAc4C,EAAerC,kCACjC,EAAK0H,MAAMrM,aAFK,EAKyBsM,EAAU3G,SAASvB,GAAxD0B,EALY,EAKZA,QAASC,EALG,EAKHA,wBACf,GAAKD,EAAL,CANkB,MAe0ByG,EAAO1E,MAAMzD,GAAnDsH,EAfY,EAeZA,aAAcE,EAfF,EAeEA,oBAChBK,EAAgB,GAEpB,GAAiD,KAA7CL,EAAoBnE,qBACtBwE,EAAgB,oBACb,CACH,IAAMO,EACJZ,EAAoBnE,qBACpBmE,EAAoBrE,gBACtBxD,QAAQC,IAAIwI,GACZP,EAAa,UAAMO,EAAN,sBAGf,EAAKR,SAAS,CAAEC,kBAChB,EAAKC,kBAAkBR,GAEvB3H,QAAQC,IAAR,mEAAwE4H,EAAoBrE,gBAA5F,cAAiHqE,EAAoBnE,qBAArI,0EACwDmE,EAAoBpE,wBAD5E,cACyGoE,EAAoBlE,+BAzB3H,EAAKsE,SAAS,CACZxM,aAAa,IAAD,OAAMuG,EAAwB,GAAK,EAAnC,YACVA,EAAwB,GAAK,MAtClB,EAgEnB9E,8BAAgC,SAACuC,GAAiB,IAAD,EACtBwD,EAAezD,kCACtCC,GADMI,EADuC,EACvCA,MAAOC,EADgC,EAChCA,MAIf,MADe,WAAOD,EAAP,YAAgBC,IApEd,EAwEnB9D,kBAAoB,SAAC0M,GAAW,IAAD,EACLA,EAAMC,OAAtBnM,EADqB,EACrBA,KAAMC,EADe,EACfA,MACVmM,EAAc,eAAQ,EAAKN,MAAMrM,YAAnB,eAAiCO,EAAOC,IAC1D,EAAKwL,SAAS,CACZhM,YAAa2M,EACbnN,aAAc,MA7EC,EAiFnBoN,uBAAyB,SAACH,KA9ExB,EAAKJ,MAAQ,CACXrM,YAAa,KACbR,aAAc,GACdyM,cAAe,IANA,E,+EAUDY,GAChB,IAAI7M,EAAcgH,EAAe7C,kCAC/B0I,GAEFhN,KAAKmM,SAAS,CAAEhM,kB,0CAYhBH,KAAKqM,kBAAkBC,EAAcrJ,S,+BAyD7B,IACApD,EAAYG,KAAKN,MAAjBG,QADD,EAE8CG,KAAKwM,MAAlDrM,EAFD,EAECA,YAAaR,EAFd,EAEcA,aAAcyM,EAF5B,EAE4BA,cACnC,OACE,6BACE,6BACE,wBAAI/L,UAAWR,EAAQoN,QAAvB,iBACA,wBAAI5M,UAAWR,EAAQqN,WAAvB,4CAIF,yBAAK7M,UAAWR,EAAQsN,WACtB,kBAAC,EAAD,CACEhN,YAAaA,EACbR,aAAcA,EACdO,kBAAmBF,KAAKE,kBACxBkB,8BAA+BpB,KAAKoB,iCAGvCzB,GACC,6BACE,uBAAGU,UAAWR,EAAQuN,WAAtB,+DAKHhB,GACC,6BACE,uBAAG/L,UAAWR,EAAQwN,YAAajB,IAGvC,yBAAK/L,UAAWR,EAAQyN,eACtB,yBAAKjN,UAAWR,EAAQyC,QACtB,kBAAC,EAAD,CAAQJ,QAASlC,KAAKuM,YAAapK,MAAM,WAE3C,yBAAK9B,UAAWR,EAAQyC,QACtB,kBAAC,EAAD,CAAQJ,QAASlC,KAAKkM,YAAa/J,MAAM,iB,GAxHhCvB,aAgINC,eAxKA,SAAC/B,GAAD,MAAY,CACzBqO,UAAW,CACTrM,MAAO,IACP3B,OAAQ,IACRoO,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,cAAe,SACf1L,OAAQ,OACR2L,UAAW,QAEbL,cAAe,CACbC,QAAS,OACTC,eAAgB,SAChBG,UAAW,QAEbrL,OAAQ,CACNN,OAAQ,UAEVoL,UAAW,CACT9N,UAAW,SACXsO,WAAY,uCACZ5M,MAAO,OAETqM,WAAY,CACV/N,UAAW,SACXsO,WAAY,uCACZ5M,MAAO,SAETiM,OAAQ,CACNU,UAAW,OACXrO,UAAW,SACXsO,WAAY,wCAEdV,UAAW,CACT5N,UAAW,SACXsO,WAAY,2CAoID/M,CAAmBoL,G,QCrK5B4B,E,YACJ,WAAYnO,GAAQ,IAAD,8BACjB,4CAAMA,KAORqN,uBAAyB,SAAAH,GAAU,IAAD,EACRA,EAAMC,OAAtBnM,EADwB,EACxBA,KAAMC,EADkB,EAClBA,MACd,EAAKwL,SAAL,eACGzL,EAAOC,KAXO,EAenBmN,iBAAmB,WACjB5J,QAAQC,IAAI,EAAKqI,MAAMuB,SADA,IAEfA,EAAY,EAAKvB,MAAjBuB,QAEJC,EAAc,KACHD,EAAQlK,MAAM,IACtB4F,SAAQ,SAACwE,EAAOC,GACrBF,GAAW,UAAOC,EAAP,MACPC,EAAQ,IAAM,GAAe,KAAVA,EAAcF,GAAW,OAC7B,KAAVE,IAAcF,GAAe,QAExCA,GAAe,IAEf,EAAK7B,SAAS,CACZ6B,iBA3BF,EAAKxB,MAAQ,CACXuB,QAAS,GACTC,YAAa,IAJE,E,sEAiCT,IACAnO,EAAYG,KAAKN,MAAjBG,QADD,EAE0BG,KAAKwM,MAA9BuB,EAFD,EAECA,QAASC,EAFV,EAEUA,YACjB,OACE,6BACE,kBAACG,EAAA,EAAD,CACExN,MAAOoN,EACPtN,SAAUT,KAAK+M,uBACfrM,KAAK,UACL0N,WAAS,EACTC,KAAK,MAEP,kBAACjM,EAAA,EAAD,CAAQC,QAAQ,YAAYH,QAASlC,KAAK8N,kBAA1C,sBAGA,kBAAC1N,EAAA,EAAD,CAAOC,UAAWR,EAAQS,OACxB,2BAAI0N,S,GAlDYpN,aAyDXC,eAhEA,SAAA/B,GAAK,MAAK,CACvBwB,MAAO,CACLgO,UAAW,QACXxN,MAAO,YA6DID,CAAmBgN,GC9CnBU,E,YAlBb,WAAY7O,GAAQ,IAAD,8BACjB,4CAAMA,KAED8M,MAAQ,CACXgC,KAAM,UAJS,E,sEAOT,IACAA,EAASxO,KAAKwM,MAAdgC,KACR,OACE,yBAAKnO,UAAU,OACH,WAATmO,GAAqB,kBAAC,EAAD,MACZ,gBAATA,GAA0B,kBAAC,EAAD,W,GAbjB5N,aCQE6N,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b6791437.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport InputBase from \"@material-ui/core/InputBase\";\n\nimport Paper from \"@material-ui/core/Paper\";\nimport {\n  withStyles,\n  MuiThemeProvider,\n  createMuiTheme,\n} from \"@material-ui/core/styles\";\n\nconst theme = createMuiTheme({\n  overrides: {\n    MuiInputBase: {\n      root: {\n        height: \"100%\",\n        cursor: \"auto\",\n      },\n      input: {\n        textAlign: \"center\",\n        fontSize: \"2em\",\n        // color: \"#0000006e\",\n      },\n    },\n  },\n});\n\nconst styles = (theme) => ({\n  paper: {\n    height: 70,\n    width: 70,\n    \"&:hover\": {\n      opacity: \"0.6\",\n    },\n  },\n  input: {\n    color: \"#0000006e\",\n  },\n  inputError: {\n    color: \"red\",\n    weight: \"800\",\n  },\n  inputOpaque: {\n    opacity: \"0.2\",\n  },\n});\n\nclass Block extends Component {\n  getInputStyle = () => {\n    const { invalidInput, inputName, classes } = this.props;\n\n    if (invalidInput && invalidInput !== inputName) return classes.inputOpaque;\n    else if (invalidInput === inputName) return classes.inputError;\n    else return classes.input;\n  };\n\n  render() {\n    const {\n      classes,\n      backgroundColor,\n      handleInputChange,\n      inputName,\n      sudokuBoard,\n    } = this.props;\n\n    return (\n      <MuiThemeProvider theme={theme}>\n        <Paper\n          className={classes.paper}\n          style={{ backgroundColor: backgroundColor }}\n        >\n          <InputBase\n            onChange={handleInputChange}\n            name={inputName}\n            value={!!sudokuBoard ? sudokuBoard[inputName] : \"\"}\n            className={this.getInputStyle()}\n          />\n        </Paper>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default withStyles(styles)(Block);\n","import React, { Component } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Block from \"./Block\";\n\nconst styles = (theme) => ({});\nclass Grid3X3 extends Component {\n  render() {\n    const {\n      backgroundColor,\n      handleInputChange,\n      blockNumber,\n      getInputNameBasedOnCoordinate,\n      sudokuBoard,\n      invalidInput,\n    } = this.props;\n    return (\n      <React.Fragment>\n        <Grid container spacing={2} justify=\"center\">\n          {[0, 1, 2].map((value) => (\n            <Grid key={value} item>\n              <Block\n                backgroundColor={backgroundColor}\n                inputName={getInputNameBasedOnCoordinate(\n                  `${blockNumber}-0-${value}`\n                )}\n                handleInputChange={handleInputChange}\n                sudokuBoard={sudokuBoard}\n                invalidInput={invalidInput}\n              />\n            </Grid>\n          ))}\n        </Grid>\n\n        <Grid container spacing={2} justify=\"center\">\n          {[0, 1, 2].map((value) => (\n            <Grid key={value} item>\n              <Block\n                backgroundColor={backgroundColor}\n                inputName={getInputNameBasedOnCoordinate(\n                  `${blockNumber}-1-${value}`\n                )}\n                handleInputChange={handleInputChange}\n                sudokuBoard={sudokuBoard}\n                invalidInput={invalidInput}\n              />\n            </Grid>\n          ))}\n        </Grid>\n\n        <Grid container spacing={2} justify=\"center\">\n          {[0, 1, 2].map((value) => (\n            <Grid key={value} item>\n              <Block\n                backgroundColor={backgroundColor}\n                inputName={getInputNameBasedOnCoordinate(\n                  `${blockNumber}-2-${value}`\n                )}\n                handleInputChange={handleInputChange}\n                sudokuBoard={sudokuBoard}\n                invalidInput={invalidInput}\n              />\n            </Grid>\n          ))}\n        </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withStyles(styles)(Grid3X3);\n","import React, { Component } from \"react\";\nimport Grid3X3 from \"./Grid3X3\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst styles = (theme) => ({\n  grid3x3Item: {\n    margin: 10,\n  },\n});\n\nclass SudokuBoard extends Component {\n  generateBackgroundColorValues = () => {\n    return [\n      \"rgb(169, 115, 222)\",\n      \"#2EC4B6\",\n      \"#F1E8B8\",\n      \"#CCFF66\",\n      \"#FF6666\",\n      \"#B7F0AD\",\n      \"#D17B0F\",\n      \"#E8D33F\",\n      \"#FF99C8\",\n    ];\n  };\n\n  render() {\n    const {\n      classes,\n      sudokuBoard,\n      handleInputChange,\n      getInputNameBasedOnCoordinate,\n      invalidInput,\n    } = this.props;\n    return (\n      <Grid container className={classes.Grid3X3}>\n        {[0, 1, 2, 3, 4, 5, 6, 7, 8].map((blockNumber) => (\n          <Grid key={blockNumber} item className={classes.grid3x3Item}>\n            <Grid3X3\n              backgroundColor={\n                this.generateBackgroundColorValues()[blockNumber]\n              }\n              blockNumber={blockNumber}\n              handleInputChange={handleInputChange}\n              getInputNameBasedOnCoordinate={getInputNameBasedOnCoordinate}\n              sudokuBoard={sudokuBoard}\n              invalidInput={invalidInput}\n            />\n          </Grid>\n        ))}\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(SudokuBoard);\n","import React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst styles = (theme) => ({\n  button: {\n    color: \"white\",\n    backgroundColor: \"#606060\",\n  },\n});\n\nclass SudokuButton extends Component {\n  render() {\n    const { classes, onClick, title } = this.props;\n    return (\n      <Button onClick={onClick} variant=\"contained\" className={classes.button}>\n        {title}\n      </Button>\n    );\n  }\n}\n\nexport default withStyles(styles)(SudokuButton);\n","class SudokuPresets {\n  easiest = [\n    [0, 0, 0, 2, 6, 0, 7, 0, 1],\n    [6, 8, 0, 0, 7, 0, 0, 9, 0],\n    [1, 9, 0, 0, 0, 4, 5, 0, 0],\n    [8, 2, 0, 1, 0, 0, 0, 4, 0],\n    [0, 0, 4, 6, 0, 2, 9, 0, 0],\n    [0, 5, 0, 0, 0, 3, 0, 2, 8],\n    [0, 0, 9, 3, 0, 0, 0, 7, 4],\n    [0, 4, 0, 0, 5, 0, 0, 3, 6],\n    [7, 0, 3, 0, 1, 8, 0, 0, 0]\n  ];\n\n  easy = [\n    [6, 0, 0, 1, 0, 5, 2, 0, 9],\n    [0, 0, 4, 9, 2, 0, 8, 0, 0],\n    [0, 0, 0, 0, 0, 0, 4, 1, 0],\n    [0, 7, 2, 3, 0, 0, 0, 4, 5],\n    [0, 0, 0, 2, 0, 4, 0, 0, 0],\n    [4, 1, 0, 0, 0, 6, 9, 2, 0],\n    [0, 9, 1, 0, 0, 0, 0, 0, 0],\n    [0, 0, 8, 0, 9, 1, 3, 0, 0],\n    [5, 0, 6, 7, 0, 8, 0, 0, 2]\n  ];\n\n  easySolved = [\n    [6, 8, 7, 1, 4, 5, 2, 3, 9],\n    [1, 3, 4, 9, 2, 7, 8, 5, 6],\n    [2, 5, 9, 6, 8, 3, 4, 1, 7],\n    [8, 7, 2, 3, 1, 9, 6, 4, 5],\n    [9, 6, 3, 2, 5, 4, 7, 8, 1],\n    [4, 1, 5, 8, 7, 6, 9, 2, 3],\n    [3, 9, 1, 4, 6, 2, 5, 7, 8],\n    [7, 2, 8, 5, 9, 1, 3, 6, 4],\n    [5, 4, 6, 7, 3, 8, 1, 9, 2]\n  ];\n\n  easy2 = [\n    [0, 0, 4, 0, 0, 0, 0, 6, 7],\n    [3, 0, 0, 4, 7, 0, 0, 0, 5],\n    [1, 5, 0, 8, 2, 0, 0, 0, 3],\n\n    [0, 0, 6, 0, 0, 0, 0, 3, 1],\n    [8, 0, 2, 1, 0, 5, 6, 0, 4],\n    [4, 1, 0, 0, 0, 0, 9, 0, 0],\n\n    [7, 0, 0, 0, 8, 0, 0, 4, 6],\n    [6, 0, 0, 0, 1, 2, 0, 0, 0],\n    [9, 3, 0, 0, 0, 0, 7, 1, 0]\n  ];\n\n  easy3 = [\n    [0, 0, 0, 0, 0, 0, 7, 0, 0],\n    [3, 9, 0, 7, 0, 8, 5, 4, 0],\n    [8, 6, 0, 0, 5, 4, 0, 0, 0],\n\n    [9, 0, 6, 0, 4, 7, 0, 0, 0],\n    [1, 3, 4, 2, 0, 0, 0, 9, 0],\n    [0, 5, 8, 1, 0, 9, 0, 0, 4],\n\n    [5, 4, 0, 9, 2, 3, 0, 0, 8],\n    [0, 0, 0, 0, 7, 0, 9, 0, 5],\n    [0, 0, 0, 0, 0, 1, 0, 3, 0]\n  ];\n\n  medium = [\n    [8, 0, 0, 2, 6, 0, 0, 0, 4],\n    [0, 1, 0, 0, 8, 3, 0, 6, 2],\n    [2, 6, 0, 7, 4, 0, 1, 0, 0],\n    [0, 0, 6, 0, 7, 8, 2, 1, 0],\n    [0, 0, 4, 0, 3, 2, 0, 8, 0],\n    [0, 2, 0, 0, 0, 9, 0, 0, 7],\n    [7, 4, 0, 0, 1, 6, 0, 2, 0],\n    [0, 3, 0, 8, 0, 4, 0, 7, 1],\n    [0, 0, 1, 0, 2, 7, 0, 0, 6]\n  ];\n\n  medium2 = [\n    [8, 5, 0, 0, 0, 1, 0, 0, 6],\n    [0, 0, 7, 0, 6, 4, 1, 0, 0],\n    [0, 0, 4, 0, 7, 0, 5, 9, 0],\n    [2, 0, 0, 0, 5, 6, 0, 0, 4],\n    [6, 0, 0, 1, 0, 9, 0, 7, 0],\n    [7, 0, 1, 0, 4, 0, 0, 0, 9],\n    [0, 1, 0, 9, 0, 0, 4, 6, 0],\n    [0, 9, 6, 0, 0, 8, 0, 0, 7],\n    [0, 7, 0, 6, 0, 0, 0, 0, 1]\n  ];\n  medium3 = [\n    [3, 0, 0, 7, 9, 0, 0, 0, 4],\n    [0, 8, 0, 0, 3, 1, 0, 5, 0],\n    [9, 0, 6, 0, 4, 0, 0, 0, 3],\n    [1, 6, 0, 0, 0, 3, 0, 4, 0],\n    [0, 0, 7, 0, 0, 6, 0, 3, 9],\n    [0, 0, 3, 4, 0, 0, 7, 0, 1],\n    [0, 5, 4, 3, 0, 0, 1, 0, 0],\n    [0, 9, 0, 1, 0, 0, 3, 0, 0],\n    [6, 0, 0, 0, 0, 5, 0, 7, 0]\n  ];\n\n  hard1 = [\n    [0, 6, 0, 0, 0, 3, 0, 0, 7],\n    [3, 0, 0, 6, 8, 0, 0, 1, 0],\n    [1, 9, 0, 2, 0, 0, 0, 0, 0],\n    [6, 8, 5, 0, 0, 0, 1, 3, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [2, 1, 0, 0, 0, 0, 7, 0, 0],\n    [4, 0, 3, 0, 0, 0, 0, 0, 6],\n    [0, 0, 0, 0, 2, 0, 0, 0, 9],\n    [0, 0, 0, 0, 4, 0, 8, 7, 0]\n  ];\n  hard2 = [\n    [5, 3, 0, 0, 7, 2, 0, 0, 8],\n    [6, 0, 9, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 1],\n    [0, 5, 0, 0, 0, 0, 1, 6, 0],\n    [2, 0, 0, 3, 9, 0, 0, 0, 0],\n    [4, 0, 0, 1, 0, 0, 8, 0, 0],\n    [0, 0, 0, 0, 6, 0, 4, 9, 0],\n    [0, 0, 0, 0, 0, 5, 0, 0, 0],\n    [0, 7, 4, 0, 0, 0, 0, 0, 0]\n  ];\n\n  reset = [\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0]\n  ];\n\n  defaultPreset = this.presetEasy;\n}\n\nexport default new SudokuPresets();\n","class BoardPositions {\n  getXCoordinate = (grid, block) => {\n    switch (grid) {\n      case 1:\n      case 4:\n      case 7:\n        return block;\n\n      case 2:\n      case 5:\n      case 8:\n        return 3 + block;\n\n      case 3:\n      case 6:\n      case 9:\n        return 6 + block;\n\n      default:\n        throw new Error(\"grid-value is out of range\");\n    }\n  };\n\n  getYCoordinate = (grid, row) => {\n    switch (grid) {\n      case 1:\n      case 2:\n      case 3:\n        return row;\n\n      case 4:\n      case 5:\n      case 6:\n        return 3 + row;\n\n      case 7:\n      case 8:\n      case 9:\n        return 6 + row;\n\n      default:\n        throw new Error(\"grid-value is out of range\");\n    }\n  };\n\n  translateRAWPositionToCoordinates = (positionRAW) => {\n    try {\n      const positionSplit = positionRAW.split(\"-\");\n\n      const grid = Number(positionSplit[0]) + 1;\n      const row = Number(positionSplit[1]) + 1;\n      const block = Number(positionSplit[2]) + 1;\n\n      const cordX = this.getXCoordinate(grid, block);\n      const cordY = this.getYCoordinate(grid, row);\n\n      return { cordX, cordY };\n    } catch (err) {\n      console.log(err);\n      alert(err.message);\n    }\n  };\n\n  translateSudokuArrayToStateObject = (sudokuArray) => {\n    let sudokuState = {};\n\n    for (let y = 0; y < 9; y++) {\n      for (let x = 0; x < 9; x++) {\n        if (sudokuArray[y][x] === 0) sudokuArray[y][x] = \"\";\n        sudokuState[`p${x + 1}-${y + 1}`] = sudokuArray[y][x];\n      }\n    }\n    return sudokuState;\n  };\n\n  getCoordinatesOfPositionState = (position) => {\n    const cordX = position[1] - 1;\n    const cordY = position[3] - 1;\n    return { cordX, cordY };\n  };\n\n  generateEmptySudokuArray = () => {\n    let sudokuArray = [];\n\n    for (let y = 0; y < 9; y++) {\n      sudokuArray[y] = [];\n      for (let x = 0; x < 9; x++) {\n        sudokuArray[y][x] = \"\";\n      }\n    }\n\n    return sudokuArray;\n  };\n\n  translateSudokuStateObjectToArray = (sudokuState) => {\n    let sudokuArray = this.generateEmptySudokuArray();\n    for (let pos in sudokuState) {\n      if (sudokuState[pos]) {\n        const { cordX, cordY } = this.getCoordinatesOfPositionState(pos);\n        sudokuArray[cordY][cordX] = Number(sudokuState[pos]);\n      }\n    }\n\n    return sudokuArray;\n  };\n\n  translateBlockPositionsToCoordinates = (blockIndex, positionOfNumber) => {\n    //blockIndex goes from left top to right bottom from 0 to 8, positionOfNumber in the same manner\n\n    const { cordX, cordY } = this.getCoordinatesOfBlock(positionOfNumber);\n\n    switch (blockIndex) {\n      case 0:\n        return { cordX, cordY };\n      case 1:\n        return { cordX: cordX + 3, cordY };\n      case 2:\n        return { cordX: cordX + 6, cordY };\n      case 3:\n        return { cordX, cordY: cordY + 3 };\n      case 4:\n        return { cordX: cordX + 3, cordY: cordY + 3 };\n      case 5:\n        return { cordX: cordX + 6, cordY: cordY + 3 };\n      case 6:\n        return { cordX, cordY: cordY + 6 };\n      case 7:\n        return { cordX: cordX + 3, cordY: cordY + 6 };\n      case 8:\n        return { cordX: cordX + 6, cordY: cordY + 6 };\n      default:\n        return new Error(\"position of blocks out of reach\");\n    }\n  };\n\n  getCoordinatesOfBlock = (positionInBlock) => {\n    switch (positionInBlock) {\n      case 0:\n      case 1:\n      case 2:\n        return { cordX: positionInBlock, cordY: 0 };\n      case 3:\n      case 4:\n      case 5:\n        return { cordX: positionInBlock - 3, cordY: 1 };\n      case 6:\n      case 7:\n      case 8:\n        return { cordX: positionInBlock - 6, cordY: 2 };\n      default:\n        return new Error(\"position of block out of reach\");\n    }\n  };\n\n  switchRowToColumnOfBoard = (sudokuBoard) => {\n    let sudokuBoardSwitchedXAndY = [];\n\n    for (let x = 0; x < 9; x++) {\n      sudokuBoardSwitchedXAndY[x] = [];\n      for (let y = 0; y < 9; y++) {\n        sudokuBoardSwitchedXAndY[x][y] = sudokuBoard[y][x];\n      }\n    }\n    return sudokuBoardSwitchedXAndY;\n  };\n\n  switchBlockRowsToColumns = (arrayBlock) => {\n    let arrayBlockSwitched90Degree = [];\n\n    for (let x = 0; x < 3; x++) {\n      for (let y = 0; y < 3; y++) {\n        arrayBlockSwitched90Degree.push(arrayBlock[y][x]);\n      }\n    }\n  };\n\n  switchBoardToBlockArrays = (sudokuBoard) => {\n    let sudokuBoardArrayBlocks = [];\n\n    for (let z = 0; z < 9; z++) {\n      sudokuBoardArrayBlocks[z] = [];\n    }\n\n    for (let y = 0; y < 9; y++) {\n      for (let x = 0; x < 9; x++) {\n        if (x < 3 && y < 3) sudokuBoardArrayBlocks[0].push(sudokuBoard[y][x]);\n        else if (x >= 3 && x < 6 && y < 3)\n          sudokuBoardArrayBlocks[1].push(sudokuBoard[y][x]);\n        else if (x >= 6 && y < 3)\n          sudokuBoardArrayBlocks[2].push(sudokuBoard[y][x]);\n        else if (x < 3 && y >= 3 && y < 6)\n          sudokuBoardArrayBlocks[3].push(sudokuBoard[y][x]);\n        else if (x >= 3 && x < 6 && y >= 3 && y < 6)\n          sudokuBoardArrayBlocks[4].push(sudokuBoard[y][x]);\n        else if (x >= 6 && y >= 3 && y < 6)\n          sudokuBoardArrayBlocks[5].push(sudokuBoard[y][x]);\n        else if (x < 3 && y >= 6)\n          sudokuBoardArrayBlocks[6].push(sudokuBoard[y][x]);\n        else if (x >= 3 && x < 6 && y >= 6)\n          sudokuBoardArrayBlocks[7].push(sudokuBoard[y][x]);\n        else if (x >= 6 && y >= 6)\n          sudokuBoardArrayBlocks[8].push(sudokuBoard[y][x]);\n      }\n    }\n    return sudokuBoardArrayBlocks;\n  };\n}\n\nexport default new BoardPositions();\n","import BoardPositions from \"./BoardPositions\";\n\nclass Validator {\n  validate = (sudokuBoard) => {\n    let validNumbers = this.validateNumbers(sudokuBoard);\n    if (!validNumbers.isValid)\n      return {\n        isValid: false,\n        positionOfInvalidNumber: validNumbers.positionOfInvalidNumber,\n      };\n\n    let validRows = this.validateRows(sudokuBoard);\n    if (!validRows.isValid)\n      return {\n        isValid: false,\n        positionOfInvalidNumber: validRows.positionOfInvalidNumber,\n      };\n\n    let validColumns = this.validateColumns(sudokuBoard);\n    if (!validColumns.isValid)\n      return {\n        isValid: false,\n        positionOfInvalidNumber: validColumns.positionOfInvalidNumber,\n      };\n\n    let validBlocks = this.validateBlocks(sudokuBoard);\n    if (!validBlocks.isValid)\n      return {\n        isValid: false,\n        positionOfInvalidNumber: validBlocks.positionOfInvalidNumber,\n      };\n\n    return { isValid: true, positionOfInvalidNumber: null };\n  };\n\n  validateNumbers = (sudokuBoard) => {\n    for (let y = 0; y < 9; y++) {\n      for (let x = 0; x < 9; x++) {\n        if (\n          (sudokuBoard[y][x] < 1 ||\n            sudokuBoard[y][x] > 9 ||\n            isNaN(sudokuBoard[y][x])) &&\n          sudokuBoard[y][x] !== \"\"\n        )\n          return { isValid: false, positionOfInvalidNumber: [x, y] };\n      }\n    }\n    return { isValid: true, positionOfInvalidNumber: null };\n  };\n\n  validateRows = (sudokuBoard) => {\n    const translateCoordinatesToStatePosition = (\n      y,\n      positionOfInvalidNumber\n    ) => [positionOfInvalidNumber, y];\n    return this.validateRow(sudokuBoard, translateCoordinatesToStatePosition);\n  };\n\n  isNumberMoreThanOnceInArray = (numberToSearchInRow, row) => {\n    return row.filter((number) => number === numberToSearchInRow).length > 1;\n  };\n\n  validate1DArray = (array) => {\n    for (let pos = 0; pos < 9; pos++) {\n      const numberToSearch = array[pos];\n      if (!numberToSearch) continue; //if number is 0, then don't compare it\n      if (this.isNumberMoreThanOnceInArray(numberToSearch, array))\n        return { isValid: false, positionOfInvalidNumber: pos };\n    }\n\n    return { isValid: true, positionOfInvalidNumber: null };\n  };\n\n  validateColumns = (sudokuBoard) => {\n    let sudokuBoardSwitchedXAndY = BoardPositions.switchRowToColumnOfBoard(\n      sudokuBoard\n    );\n    const translateCoordinatesToStatePosition = (\n      y,\n      positionOfInvalidNumber\n    ) => [y, positionOfInvalidNumber];\n    return this.validateRow(\n      sudokuBoardSwitchedXAndY,\n      translateCoordinatesToStatePosition\n    );\n  };\n\n  validateRow = (sudokuArray, callbackPositionTranslation) => {\n    for (let y = 0; y < 9; y++) {\n      const row = sudokuArray[y];\n      let { isValid, positionOfInvalidNumber } = this.validate1DArray(row);\n\n      if (!isValid) {\n        return {\n          isValid,\n          positionOfInvalidNumber: callbackPositionTranslation(\n            y,\n            positionOfInvalidNumber\n          ),\n        };\n      }\n    }\n    return { isValid: true, positionOfInvalidNumber: null };\n  };\n\n  validateBlocks = (sudokuBoard) => {\n    const translateCoordinatesToStatePosition = (\n      y,\n      positionOfInvalidNumber\n    ) => {\n      const {\n        cordX,\n        cordY,\n      } = BoardPositions.translateBlockPositionsToCoordinates(\n        y,\n        positionOfInvalidNumber\n      );\n      return [cordX, cordY];\n    };\n\n    let sudokuBoardBlockArrays = BoardPositions.switchBoardToBlockArrays(\n      sudokuBoard\n    );\n    return this.validateRow(\n      sudokuBoardBlockArrays,\n      translateCoordinatesToStatePosition\n    );\n  };\n}\n\nexport default new Validator();\n","\nclass Statistics {\n\n  calculateSolvingProcess = () => {\n\n  }\n  \n  calculateFoundNumbers = (oldSudokuBoard, newSudokuBoard) => {\n\n    let totalNumbersOld = 0\n    let totalPossibleNumbersOld = 0\n    let totalFoundNumbersNew = 0\n    let totalPossibleNumbersNew = 0\n\n    for (let y = 0; y < 9; y++) {\n        for (let x = 0; x < 9; x++) {\n          if (this.isFixedField(oldSudokuBoard[y][x]))\n            totalNumbersOld++;\n          if (this.isFixedField(newSudokuBoard[y][x]))\n            totalFoundNumbersNew++;\n          \n          totalPossibleNumbersOld += oldSudokuBoard[y][x].length\n          totalPossibleNumbersNew += newSudokuBoard[y][x].length\n        }\n    }\n\n    return {\n      totalNumbersOld, \n      totalPossibleNumbersOld, \n      totalFoundNumbersNew, \n      totalPossibleNumbersNew\n    }\n\n  }\n\n  isFixedField = (field) => {\n    return field.length === 1;\n  }\n\n\n\n\n\n\n\n}\n\nexport default new Statistics();\n","import BoardPositions from \"./BoardPositions\";\n\nclass ScratchOffCheck {\n  constructor() {\n    this.sudokuBoard = null;\n    this.hasNewCandidateFound = false;\n  }\n\n  //crossHatching: check for rows, columns and blocks and scratch out all options of each field\n  // that aren't possible - referred to as \"cross-hatching\"\n  solve = (sudokuBoard) => {\n    this.sudokuBoard = sudokuBoard;\n    let counter = 0;\n    do {\n      counter++;\n      console.log(\n        \"----------------ROUND \" + counter + \" scratch off -----------------\"\n      );\n      this.hasNewCandidateFound = false;\n      this.checkRows();\n      this.checkColumns();\n      this.checkBlocks();\n    } while (this.hasNewCandidateFound);\n\n    return this.sudokuBoard;\n  };\n\n  checkRows = () => {\n    for (let y = 0; y < 9; y++) {\n      this.checkRow(y);\n    }\n  };\n\n  checkColumns = () => {\n    this.sudokuBoard = BoardPositions.switchRowToColumnOfBoard(\n      this.sudokuBoard\n    );\n\n    for (let x = 0; x < 9; x++) {\n      this.checkRow(x);\n    }\n\n    this.sudokuBoard = BoardPositions.switchRowToColumnOfBoard(\n      this.sudokuBoard\n    );\n  };\n\n  checkBlocks = () => {\n    this.sudokuBoard = BoardPositions.switchBoardToBlockArrays(\n      this.sudokuBoard\n    );\n\n    for (let y = 0; y < 9; y++) {\n      this.checkRow(y);\n    }\n\n    this.sudokuBoard = BoardPositions.switchBoardToBlockArrays(\n      this.sudokuBoard\n    );\n  };\n\n  checkRow = (y) => {\n    let fixedNumbers = this.getAllFixedNumbersOfArray(y);\n\n    this.sudokuBoard[y] = this.sudokuBoard[y].map((x) => {\n      if (this.isFixedField(x)) return x;\n      const newPossibleNumbersForField = this.scratchAllFixedNumbersFromField(\n        x,\n        fixedNumbers\n      );\n      return newPossibleNumbersForField;\n    });\n  };\n\n  getAllFixedNumbersOfArray = (y) => {\n    const fixedFields = this.sudokuBoard[y].filter((x) => this.isFixedField(x));\n    const fixedNumbers = fixedFields.map((field) => field[0]);\n\n    return fixedNumbers;\n  };\n\n  scratchAllFixedNumbersFromField = (field, fixedNumbers) => {\n    return field.filter((possibleNumberOfField) => {\n      if (fixedNumbers.includes(possibleNumberOfField)) {\n        this.hasNewCandidateFound = true;\n        return false;\n      } else {\n        return true;\n      }\n    });\n  };\n\n  isFixedField = (field) => {\n    return field.length === 1;\n  };\n}\n\nexport default new ScratchOffCheck();\n","import BoardPositions from \"./BoardPositions\";\nimport ScratchOffCheck from \"./ScratchOffCheck\";\n\nclass CrossHatching {\n  constructor() {\n    this.sudokuBoard = null;\n    this.hasNewCandidateFound = false;\n  }\n\n  //crossHatching: check for rows, columns and blocks and scratch out all options of each field\n  // that aren't possible - referred to as \"cross-hatching\"\n  solve = sudokuBoard => {\n    console.log(\"----- Level 1: crossHatching ----\");\n    this.sudokuBoard = sudokuBoard;\n    let counter = 0;\n    let hasFoundAtLeastOneCandidate = false;\n\n    do {\n      counter++;\n      console.log(\n        \"----------------ROUND \" + counter + \" crossHatching -----------------\"\n      );\n      this.hasNewCandidateFound = false;\n      this.sudokuBoard = ScratchOffCheck.solve(this.sudokuBoard);\n      this.checkRows();\n      this.checkColumns();\n      this.checkBlocks();\n\n      if (this.hasNewCandidateFound) hasFoundAtLeastOneCandidate = true;\n    } while (this.hasNewCandidateFound);\n\n    return {\n      sudokuBoard: this.sudokuBoard,\n      hasNewCandidateFound: hasFoundAtLeastOneCandidate\n    };\n  };\n\n  checkRows = () => {\n    this.checkArrayForSinglePossibleCandidates();\n  };\n\n  checkColumns = () => {\n    this.sudokuBoard = BoardPositions.switchRowToColumnOfBoard(\n      this.sudokuBoard\n    );\n\n    this.checkArrayForSinglePossibleCandidates();\n\n    this.sudokuBoard = BoardPositions.switchRowToColumnOfBoard(\n      this.sudokuBoard\n    );\n  };\n\n  checkBlocks = () => {\n    this.sudokuBoard = BoardPositions.switchBoardToBlockArrays(\n      this.sudokuBoard\n    );\n\n    this.checkArrayForSinglePossibleCandidates();\n\n    this.sudokuBoard = BoardPositions.switchBoardToBlockArrays(\n      this.sudokuBoard\n    );\n  };\n\n  checkArrayForSinglePossibleCandidates = () => {\n    this.sudokuBoard = this.sudokuBoard.map((y, rowIndex) => {\n      const numbersWithSinglePossibleCandidates = this.getAllNumbersWithSinglePossibleCandidateInArray(\n        y,\n        rowIndex\n      );\n\n      return this.getUpdatedArrayWithAllFoundSinglePossibleCandidatesInField(\n        y,\n        numbersWithSinglePossibleCandidates\n      );\n    });\n  };\n\n  getUpdatedArrayWithAllFoundSinglePossibleCandidatesInField = (\n    array,\n    numbersWithSinglePossibleCandidates\n  ) => {\n    return array.map(candidatesOfField => {\n      const foundNumberWithSinglePossibleCandidate = this.getNumberWithSinglePossibleCandidateInField(\n        candidatesOfField,\n        numbersWithSinglePossibleCandidates\n      );\n\n      if (foundNumberWithSinglePossibleCandidate) {\n        this.hasNewCandidateFound = true;\n        return [foundNumberWithSinglePossibleCandidate];\n      } else return candidatesOfField;\n    });\n  };\n\n  getNumberWithSinglePossibleCandidateInField = (\n    candidatesOfField,\n    numbersWithSinglePossibleCandidates\n  ) => {\n    return candidatesOfField.find(candidate => {\n      return numbersWithSinglePossibleCandidates.includes(candidate);\n    });\n  };\n\n  getAllNumbersWithSinglePossibleCandidateInArray = (array, rowIndex) => {\n    let numbersWithSinglePossibleCandidates = [];\n    const fixedNumbers = this.getAllFixedNumbersOfArray(rowIndex);\n\n    for (let number = 1; number <= 9; number++) {\n      let singleNumberCounter = 0;\n      array.forEach(candidatesOfField => {\n        if (\n          !this.isFixedField(candidatesOfField) &&\n          candidatesOfField.includes(number)\n        ) {\n          singleNumberCounter++;\n        }\n      });\n      if (singleNumberCounter === 1 && !fixedNumbers.includes(number)) {\n        numbersWithSinglePossibleCandidates.push(number);\n      }\n    }\n\n    return numbersWithSinglePossibleCandidates;\n  };\n\n  getAllFixedNumbersOfArray = y => {\n    const fixedFields = this.sudokuBoard[y].filter(x => this.isFixedField(x));\n    const fixedNumbers = fixedFields.map(field => field[0]);\n\n    return fixedNumbers;\n  };\n\n  isFixedField = field => {\n    return field.length === 1;\n  };\n}\n\nexport default new CrossHatching();\n","import BoardPositions from \"./BoardPositions\";\n\nclass RangeChecking {\n  constructor() {\n    this.sudokuBoard = null;\n    this.isNewNumberScratchedOff = false;\n    this.checkColumnRowOrBlock = \"\";\n  }\n\n  // rangeChecking: When a candidate is possible in a certain block and row/column,\n  // and it is not possible anywhere else in the same block, then it is also not possible\n  // anywhere else in the same row/column\n  solve = (sudokuBoard) => {\n    console.log(\"----- Level 2: RangeChecking ----\");\n    this.sudokuBoard = sudokuBoard;\n    let counter = 0;\n    let hasFoundAtLeastOneCandidate = false;\n\n    do {\n      counter++;\n      console.log(\n        \"----------------ROUND \" + counter + \" RangeChecking -----------------\"\n      );\n      this.hasNewCandidateFound = false;\n\n      this.checkRows();\n\n      if (this.hasNewCandidateFound) hasFoundAtLeastOneCandidate = true;\n    } while (this.hasNewCandidateFound);\n\n    return {\n      sudokuBoard: this.sudokuBoard,\n      hasNewCandidateFound: hasFoundAtLeastOneCandidate,\n    };\n  };\n\n  checkRows = () => {\n    this.checkBlocksForCandidateInCommonColumnOrRow();\n  };\n\n  checkBlocksForCandidateInCommonColumnOrRow = () => {\n    let sudokuBoardBlockArrays = [];\n    sudokuBoardBlockArrays = BoardPositions.switchBoardToBlockArrays(\n      this.sudokuBoard\n    );\n\n    let rowsWithEqualCandidates = []; // format: [{row: xy, value: z}]\n\n    for (let blockNumber = 0; blockNumber < 9; blockNumber++) {\n      let rowWithEqualCandidates = this.checkBlockForCandidateInCommonRowOrColumn(\n        sudokuBoardBlockArrays,\n        blockNumber\n      );\n\n      rowsWithEqualCandidates.push(rowWithEqualCandidates);\n    }\n\n    rowsWithEqualCandidates.forEach((rowOfCandidates, blockNumber) => {\n      rowOfCandidates.forEach((rowOfCandidate) => {\n        this.scratchCandidatesOffRow(\n          rowOfCandidate.row,\n          rowOfCandidate.value,\n          blockNumber\n        );\n      });\n    });\n\n    //same logic for columns\n  };\n\n  checkBlockForCandidateInCommonRowOrColumn = (\n    sudokuBoardBlockArrays,\n    blockNumber\n  ) => {\n    // console.log(\"blockNumber: \", blockNumber);\n    const positionsOfEqualCandidates = this.findPositionsOfEqualNumbersInArray(\n      sudokuBoardBlockArrays[blockNumber]\n    ); //gets the positions (index) and the value of the equal candidate\n    const rowsWithEqualCandidates = this.getPositionOfEqualNumbersOnlyFoundInSameRow(\n      positionsOfEqualCandidates\n    );\n\n    const translatedPositionsWithEqualCandidates = this.getPositionsByBlockNumber(\n      blockNumber,\n      rowsWithEqualCandidates\n    ); //depending on the blocknumber and if the array is modified for column or row, the position will be different\n\n    return translatedPositionsWithEqualCandidates;\n  };\n\n  getPositionsByBlockNumber = (blockNumber, rowsWithEqualCandidates) => {\n    return this.translateRowPositionByBlockNumber(\n      blockNumber,\n      rowsWithEqualCandidates\n    );\n  };\n\n  translateRowPositionByBlockNumber = (\n    blockNumber,\n    rowsWithEqualCandidates\n  ) => {\n    const translatedRows = rowsWithEqualCandidates.map((row) => {\n      switch (blockNumber) {\n        case 0:\n        case 1:\n        case 2:\n          return { ...row, blockNumber };\n        case 3:\n        case 4:\n        case 5:\n          return { row: row.row + 3, value: row.value, blockNumber };\n        case 6:\n        case 7:\n        case 8:\n          return { row: row.row + 6, value: row.value, blockNumber };\n        default:\n          throw new Error(\"can't translate row index of block out of range\");\n      }\n    });\n    return translatedRows;\n  };\n\n  findPositionsOfEqualNumbersInArray = (blockArray) => {\n    let equalNumbers = [];\n    for (let candidate = 1; candidate <= 9; candidate++) {\n      let equalNumberCounter = { counter: 0, position: [] };\n\n      blockArray.forEach((numberWithCandidates, position) => {\n        if (numberWithCandidates.includes(candidate)) {\n          equalNumberCounter.counter = equalNumberCounter.counter + 1;\n          equalNumberCounter.position = [\n            ...equalNumberCounter.position,\n            position,\n          ];\n        }\n      });\n      if (equalNumberCounter.counter > 1)\n        equalNumbers.push({\n          position: equalNumberCounter.position,\n          value: candidate,\n        });\n    }\n\n    return equalNumbers;\n  };\n\n  getPositionOfEqualNumbersOnlyFoundInSameRow = (\n    positionsOfEqualCandidates\n  ) => {\n    let rowsWithEqualCandidates = []; // format: [{row: xy, value: z}]\n\n    positionsOfEqualCandidates.forEach((positionOfEqualCandidate) => {\n      const rowWithEqualCandidate = this.findEqualCandidatesInBlockOnlyInEqualRow(\n        positionOfEqualCandidate\n      );\n      if (rowWithEqualCandidate)\n        rowsWithEqualCandidates.push(rowWithEqualCandidate);\n    });\n\n    return rowsWithEqualCandidates;\n  };\n\n  findEqualCandidatesInBlockOnlyInEqualRow = (positionOfEqualCandidate) => {\n    // console.log(\"positionOfEqualCandidate: \", positionOfEqualCandidate);\n    const validRows = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n    ];\n    let startingRowOfCandidate = validRows.findIndex((row) =>\n      row.includes(positionOfEqualCandidate.position[0])\n    );\n\n    for (\n      let positionIndex = 1;\n      positionIndex < positionOfEqualCandidate.position.length;\n      positionIndex++\n    ) {\n      if (\n        !validRows[startingRowOfCandidate].includes(\n          positionOfEqualCandidate.position[positionIndex]\n        )\n      )\n        return null;\n    }\n\n    return {\n      row: startingRowOfCandidate,\n      value: positionOfEqualCandidate.value,\n    };\n  };\n\n  scratchCandidatesOffRow = (row, valueToScratchOff, blockNumber) => {\n    this.sudokuBoard = this.sudokuBoard.map((rowOfBoard, rowIndex) => {\n      if (rowIndex !== row) return rowOfBoard;\n\n      let x = rowOfBoard.map((candidates, column) => {\n        let y = candidates.filter((candidate) => {\n          if (\n            candidate === valueToScratchOff &&\n            !this.isBlockWhereValueToScratchOffWasFound(\n              row,\n              column,\n              blockNumber\n            )\n          ) {\n            this.hasNewCandidateFound = true;\n            return false;\n          } else return true;\n        });\n        return y;\n      });\n      return x;\n    });\n  };\n\n  // check if the original value was found in the given block - if so, don't scratch off that value,\n  // as this is the block where the values have to eventually be in\n  isBlockWhereValueToScratchOffWasFound = (row, column, blockNumber) => {\n    return this.isBlockWhereValueToScratchOffWasFoundInCommonRow(\n      row,\n      column,\n      blockNumber\n    );\n  };\n\n  isBlockWhereValueToScratchOffWasFoundInCommonRow = (\n    row,\n    column,\n    blockNumber\n  ) => {\n    switch (blockNumber) {\n      case 0:\n        return row < 3 && column < 3;\n      case 1:\n        return row < 3 && column >= 3 && column < 6;\n      case 2:\n        return row < 3 && column >= 6 && column < 9;\n\n      case 3:\n        return row >= 3 && row < 6 && column < 3;\n      case 4:\n        return row >= 3 && row < 6 && column >= 3 && column < 6;\n      case 5:\n        return row >= 3 && row < 6 && column >= 6 && column < 9;\n\n      case 6:\n        return row >= 6 && row < 9 && column < 3;\n      case 7:\n        return row >= 6 && row < 9 && column >= 3 && column < 6;\n      case 8:\n        return row >= 6 && row < 9 && column >= 6 && column < 9;\n      default:\n        return true;\n    }\n  };\n\n  isFixedField = (field) => {\n    return field.length === 1;\n  };\n}\n\nexport default new RangeChecking();\n","import Statistics from \"./Statistics\";\nimport CrossHatching from \"./CrossHatching\";\nimport RangeChecking from \"./RangeChecking\";\n\nclass Solver {\n  constructor() {\n    this.sudokuBoard = null;\n    this.hasNewCandidateFound = false;\n  }\n\n  // each field has 9 possible numbers. The sudoku will be solved by 'scratching' off\n  // all numbers that are not possible anymore due to the given numbers.\n  // Each 'level' brings a higher degree of logic. The easiest suodkus will already be solved\n  // at level 1\n  solve = (sudokuBoard) => {\n    console.log(\"called function solve with \", sudokuBoard);\n    const sudokuBoardWithAllPossibleNumbers = this.generateAllPossibleNumbersForFields(\n      sudokuBoard\n    );\n    this.sudokuBoard = [...sudokuBoardWithAllPossibleNumbers];\n\n    // there are mutliple steps (depending on the difficulty of a sudoku) to solve a sudoku. Starting from the easiest method to the more advanced.\n    // All methods are explained here: https://www.stolaf.edu/people/hansonr/sudoku/explain.htm\n\n    let counter = 0;\n\n    do {\n      counter++;\n      console.log(\n        \"----------------ROUND \" + counter + \" solving Sudoku -----------------\"\n      );\n      this.hasNewCandidateFound = false;\n      let sudokuBoardResult = null;\n      sudokuBoardResult = CrossHatching.solve(this.sudokuBoard);\n\n      if (sudokuBoardResult.hasNewCandidateFound)\n        sudokuBoardResult = RangeChecking.solve(sudokuBoardResult.sudokuBoard);\n\n      this.sudokuBoard = sudokuBoardResult.sudokuBoard;\n      this.hasNewCandidateFound = sudokuBoardResult.hasNewCandidateFound;\n    } while (this.hasNewCandidateFound);\n\n    console.log(this.sudokuBoard, \"solvedBoard with possible numbers\");\n    const sudokuSolved = this.translateSudokuWithAllPossibleNumbersBackToNormalArray();\n\n    const statisticsOfSolving = Statistics.calculateFoundNumbers(\n      sudokuBoardWithAllPossibleNumbers,\n      this.sudokuBoard\n    );\n    return { sudokuSolved, statisticsOfSolving };\n  };\n\n  generateAllPossibleNumbersForFields = (sudokuBoard) => {\n    // if number in field is already in use, then don't add any\n    // other possibilities to it, else add all numbers\n    for (let y = 0; y < 9; y++) {\n      for (let x = 0; x < 9; x++) {\n        if (!sudokuBoard[y][x]) sudokuBoard[y][x] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n        else sudokuBoard[y][x] = [sudokuBoard[y][x]];\n      }\n    }\n    return sudokuBoard;\n  };\n\n  translateSudokuWithAllPossibleNumbersBackToNormalArray = () => {\n    let newSudokuBoard = [];\n\n    for (let y = 0; y < 9; y++) {\n      newSudokuBoard[y] = [];\n      for (let x = 0; x < 9; x++) {\n        if (this.isFixedField(this.sudokuBoard[y][x]))\n          newSudokuBoard[y][x] = this.sudokuBoard[y][x][0];\n        else newSudokuBoard[y][x] = \"\";\n      }\n    }\n    return newSudokuBoard;\n  };\n\n  isFixedField = (field) => {\n    return field.length === 1;\n  };\n}\n\nexport default new Solver();\n","import React, { Component } from \"react\";\nimport SudokuBoard from \"./Grid/SudokuBoard\";\nimport Button from \"./Grid/SudokuButton\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport SudokuPresets from \"../sudokuPresets\";\nimport Validator from \"../Logic/Validator\";\nimport Solver from \"../Logic/Solver\";\nimport BoardPositions from \"../Logic/BoardPositions\";\n\nconst styles = (theme) => ({\n  boardSize: {\n    width: 800,\n    height: 800,\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    margin: \"auto\",\n    marginTop: \"40px\",\n  },\n  buttonWrapper: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    marginTop: \"40px\",\n  },\n  button: {\n    margin: \"0 20px\",\n  },\n  errorText: {\n    textAlign: \"center\",\n    fontFamily: \"Roboto, Helvetica, Arial, sans-serif\",\n    color: \"red\",\n  },\n  solvedText: {\n    textAlign: \"center\",\n    fontFamily: \"Roboto, Helvetica, Arial, sans-serif\",\n    color: \"green\",\n  },\n  header: {\n    marginTop: \"60px\",\n    textAlign: \"center\",\n    fontFamily: \"Roboto, Helvetica, Arial, sans-serif\",\n  },\n  subHeader: {\n    textAlign: \"center\",\n    fontFamily: \"Roboto, Helvetica, Arial, sans-serif\",\n  },\n});\n\nclass Sudoku extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sudokuBoard: null,\n      invalidInput: \"\",\n      solvedMessage: \"\",\n    };\n  }\n\n  updateSudokuBoard(suokuArray) {\n    let sudokuBoard = BoardPositions.translateSudokuArrayToStateObject(\n      suokuArray\n    );\n    this.setState({ sudokuBoard });\n  }\n\n  resetSudoku = () => {\n    this.setState({\n      invalidInput: \"\",\n      solvedMessage: \"\",\n    });\n    this.updateSudokuBoard(SudokuPresets.reset);\n  };\n\n  componentDidMount() {\n    this.updateSudokuBoard(SudokuPresets.reset);\n  }\n\n  solveSodoku = () => {\n    const sudokuArray = BoardPositions.translateSudokuStateObjectToArray(\n      this.state.sudokuBoard\n    );\n\n    let { isValid, positionOfInvalidNumber } = Validator.validate(sudokuArray);\n    if (!isValid) {\n      this.setState({\n        invalidInput: `p${positionOfInvalidNumber[0] + 1}-${\n          positionOfInvalidNumber[1] + 1\n        }`,\n      });\n      // alert(`invalid number in row ${positionOfInvalidNumber}`);\n      return;\n    }\n    let { sudokuSolved, statisticsOfSolving } = Solver.solve(sudokuArray);\n    let solvedMessage = \"\";\n\n    if (statisticsOfSolving.totalFoundNumbersNew === 81)\n      solvedMessage = \"Sudoku solved\";\n    else {\n      const foundNumbersDiff =\n        statisticsOfSolving.totalFoundNumbersNew -\n        statisticsOfSolving.totalNumbersOld;\n      console.log(foundNumbersDiff);\n      solvedMessage = `${foundNumbersDiff} new numbers found`;\n    }\n\n    this.setState({ solvedMessage });\n    this.updateSudokuBoard(sudokuSolved);\n\n    console.log(`amount of found numbers in given sudoku / solved sudoku: ${statisticsOfSolving.totalNumbersOld} / ${statisticsOfSolving.totalFoundNumbersNew} \\n\n    amount of candidates in given sudoku / solved sudoku: ${statisticsOfSolving.totalPossibleNumbersOld} / ${statisticsOfSolving.totalPossibleNumbersNew}`);\n  };\n\n  getInputNameBasedOnCoordinate = (positionRAW) => {\n    const { cordX, cordY } = BoardPositions.translateRAWPositionToCoordinates(\n      positionRAW\n    );\n    const inputName = `p${cordX}-${cordY}`;\n    return inputName;\n  };\n\n  handleInputChange = (event) => {\n    const { name, value } = event.target;\n    let sudokuBoardNew = { ...this.state.sudokuBoard, [name]: value };\n    this.setState({\n      sudokuBoard: sudokuBoardNew,\n      invalidInput: \"\",\n    });\n  };\n\n  handleSudokuArrayMaker = (event) => {};\n\n  render() {\n    const { classes } = this.props;\n    const { sudokuBoard, invalidInput, solvedMessage } = this.state;\n    return (\n      <div>\n        <div>\n          <h1 className={classes.header}>Sudoku-Solver</h1>\n          <h3 className={classes.subHeader}>\n            Enter the numbers of your Sudoku-puzzle\n          </h3>\n        </div>\n        <div className={classes.boardSize}>\n          <SudokuBoard\n            sudokuBoard={sudokuBoard}\n            invalidInput={invalidInput}\n            handleInputChange={this.handleInputChange}\n            getInputNameBasedOnCoordinate={this.getInputNameBasedOnCoordinate}\n          />\n        </div>\n        {invalidInput && (\n          <div>\n            <p className={classes.errorText}>\n              Invalid input. Please change the value in the marked field\n            </p>\n          </div>\n        )}\n        {solvedMessage && (\n          <div>\n            <p className={classes.solvedText}>{solvedMessage}</p>\n          </div>\n        )}\n        <div className={classes.buttonWrapper}>\n          <div className={classes.button}>\n            <Button onClick={this.solveSodoku} title=\"Solve\" />\n          </div>\n          <div className={classes.button}>\n            <Button onClick={this.resetSudoku} title=\"Reset\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(Sudoku);\n","import React, { Component } from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport { TextField, Button, Paper } from \"@material-ui/core\";\n\nconst styles = theme => ({\n  paper: {\n    minHeight: \"600px\",\n    width: \"600px\"\n  }\n});\n\nclass SudokuMaker extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      numbers: \"\",\n      arrayOutput: \"\"\n    };\n  }\n\n  handleSudokuArrayMaker = event => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  convertTo2DArray = () => {\n    console.log(this.state.numbers);\n    const { numbers } = this.state;\n\n    let arrayOutput = \"[[\";\n    const digits = numbers.split(\"\");\n    digits.forEach((digit, index) => {\n      arrayOutput += `${digit}, `;\n      if (index % 9 === 8 && index !== 80) arrayOutput += `], [`;\n      else if (index === 80) arrayOutput += \"]\";\n    });\n    arrayOutput += \"]\";\n\n    this.setState({\n      arrayOutput\n    });\n  };\n\n  render() {\n    const { classes } = this.props;\n    const { numbers, arrayOutput } = this.state;\n    return (\n      <div>\n        <TextField\n          value={numbers}\n          onChange={this.handleSudokuArrayMaker}\n          name=\"numbers\"\n          multiline\n          rows=\"6\"\n        />\n        <Button variant=\"contained\" onClick={this.convertTo2DArray}>\n          Transform to array\n        </Button>\n        <Paper className={classes.paper}>\n          <p>{arrayOutput}</p>\n        </Paper>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(SudokuMaker);\n","import React, { Component } from \"react\";\nimport Sudoku from \"./Components/Sudoku\";\nimport SudokuMaker from \"./Components/SudokuMaker\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      view: \"sudoku\", //\"sudoku\", \"sudokuMaker\"\n    };\n  }\n  render() {\n    const { view } = this.state;\n    return (\n      <div className=\"App\">\n        {view === \"sudoku\" && <Sudoku />}\n        {view === \"sudokuMaker\" && <SudokuMaker />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}